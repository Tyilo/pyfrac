#!/usr/bin/env python3
import os
import sys
import code
import math
import codeop
import parser
import argparse
import readline
import fractions
import itertools
import contextlib


CONSTRUCTOR_VAR = '_F'


def factor_bases(n, *bases):
    '''
    Factor n into powers of bases and a residue:

    >>> n = 34132322487546384586981244928
    >>> e2, e3, r = factor_bases(n, 2, 3)
    >>> e2, e3, r
    (22, 20, 2333892461657)
    >>> n == 2**e2 * 3**e3 * r
    True
    >>> (r % 2, r % 3)
    (1, 2)

    Note, bases must be pairwise coprime.
    '''

    for b in bases:
        exp = 0
        q, r = divmod(n, b)
        while q > 0 and r == 0:
            n = q
            exp += 1
            q, r = divmod(n, b)
        yield exp
    yield n


@contextlib.contextmanager
def override_repr(type, repr):
    old_repr = type.__repr__
    type.__repr__ = repr
    try:
        yield
    finally:
        type.__repr__ = old_repr


def fraction_repr(v, min_exp=5):
    p, q = v.numerator, v.denominator
    if q == 1:
        # v is integer
        return str(p)
    else:
        # Can v be written with a finite decimal expansion?
        # v = p/q (reduced) can be written as k / 10**e
        # if and only if q can be written as 2**x * 5**y
        x, y, rest = factor_bases(q, 2, 5)
        assert q == rest * 2**x * 5**y
        if rest == 1:
            tens = max(x, y)
            # If 2**x * 5**y divides q, then 10**max(x,y) divides q.
            whole = v * 10 ** tens
            # ... so v * 10**max(x,y) is integer:
            assert whole.denominator == 1

            sign = '-' if whole.numerator < 0 else ''
            digits = str(abs(whole.numerator))
            exponent = len(digits) - 1 - tens
            if abs(exponent) >= min_exp:
                dotted = (digits if len(digits) == 1 else
                          '%s.%s' % (digits[0], digits[1:]))
                s = '%s%se%+03.0f' % (sign, dotted, exponent)
            else:
                # "Divide" by 10**max(x,y) using string operations:
                s = digits.rjust(tens, '0')
                s = sign + (s[:-tens] or '0') + '.' + s[-tens:].rstrip('0')
            # The resulting decimal expansion is equal to the input:
            assert fractions.Fraction(s) == v
            return s
        else:
            return str(v)


def int_floorlog(n: int, base: int, *, return_exp=False):
    '''
    >>> int_floorlog(1, 10)
    0
    >>> int_floorlog(9, 10)
    0
    >>> int_floorlog(10, 10)
    1
    >>> int_floorlog(99, 10)
    1
    >>> int_floorlog(100, 10)
    2
    >>> int_floorlog(10**100, 10)
    100
    >>> int_floorlog(10**100 + 12345, 10)
    100
    >>> int_floorlog(10**101 - 1, 10)
    100
    '''
    if base <= 1:
        raise ValueError('invalid log base')
    if n <= 0:
        raise ValueError('log of non-positive')
    exps = []
    exp_hi = base
    while exp_hi <= n:
        exps.append(exp_hi)
        exp_hi **= 2
    if not exps:
        if return_exp:
            return 0, 1
        else:
            return 0
    exp_lo = exps.pop()
    lo = 2 ** len(exps)
    assert exp_lo == base ** lo
    hi = lo * 2
    while hi - lo > 1:
        assert exp_lo == base ** lo
        v = (hi - lo) // 2
        exp_v = exps.pop()
        assert exp_v == base ** v
        mid = lo + v
        exp_mid = exp_lo * exp_v
        if exp_mid <= n:
            lo = mid
            exp_lo = exp_mid
        else:
            hi = mid
    assert base ** lo <= n < base ** (lo + 1)
    if return_exp:
        return lo, exp_lo
    else:
        return lo


def repeated(n: fractions.Fraction, base=10, min_exp=5, limit=75):
    def iter_digits(n: fractions.Fraction, base):
        while True:
            whole = n.numerator // n.denominator
            yield whole, (n.numerator, n.denominator)
            n = (n - whole) * base

    if n < 0:
        r = repeated(-n, base, min_exp, limit)
        return '-%s' % r if r else r

    exponent = fraction_floorlog(n, base)
    if abs(exponent) < min_exp:
        exponent = 0
    n /= fractions.Fraction(base) ** exponent
    s1 = iter_digits(n, base)
    s2 = iter_digits(n, base)
    digits = []
    for i, ((a, b), (c, d), (e, f)) in enumerate(zip(s1, s2, s2)):
        if i > limit:
            return None
        digits.append(c)
        digits.append(e)
        if b == f:
            search = b
            break
    tail = []
    for (a, b) in s2:
        tail.append(a)
        if b == search:
            assert tail[-1] == digits[-1]
            break
    revtail = list(reversed(tail))
    cut = next((i for i, d in enumerate(reversed(digits))
                if d != revtail[i % len(tail)]), len(digits))
    keep = max(1, len(digits) - cut)
    tail = digits[keep:keep+len(tail)]
    digits = digits[:keep]
    if tail == [0]:
        str_tail = ''
    else:
        str_tail = '(%s)' % ''.join(map(str, tail))
    if exponent == 0:
        str_exponent = ''
    else:
        str_exponent = 'e%+.0f' % exponent
    return '%s.%s%s%s' % (digits[0], ''.join(map(str, digits[1:])),
                          str_tail, str_exponent)


def fraction_floorlog(f: fractions.Fraction, base):
    '''
    >>> from fractions import Fraction as F
    >>> fraction_floorlog(F(4, 3)**100, 10)
    12
    >>> fraction_floorlog(F(3, 4)**100, 10)
    -13
    >>> float(F(3, 4)**100)  # doctest:+ELLIPSIS
    3...e-13
    '''
    p, q = f.numerator, f.denominator
    if p <= 0:
        raise ValueError('log of non-positive')
    res = None
    if p < q:
        n, r = divmod(q, p)
        inv_res, exp_inv_res = int_floorlog(n, base, return_exp=True)
        if r == 0 and exp_inv_res == n:
            # base ** inv_res == q/p,
            # so base ** -inv_res == p/q,
            res = -inv_res
        else:
            # base ** inv_res < q/p < base ** (inv_res + 1),
            # so base ** (-inv_res - 1) < p/q < base ** -inv_res
            res = -inv_res - 1
    else:
        res = int_floorlog(p // q, base)
    assert base ** res <= f < base ** (res + 1)
    return res


def display_hook(v=None):
    '''
    Customize display of fractions and floats.
    '''
    if v is None:
        display_hook.most_recent = None
        return
    if isinstance(v, int) and not isinstance(v, bool):
        v = fractions.Fraction(v)
    if isinstance(v, fractions.Fraction):
        s = fraction_repr(v)
        if '/' in s:
            r = repeated(v)
            if not r:
                disp = '%s â‰ˆ %s' % (v, float(v))
            else:
                disp = '%s = %s' % (v, r)
        else:
            disp = s
        value = v
    elif isinstance(v, float):
        # In our REPL, type(1.1) is Fraction,
        # so we must output float(1.1) as float(1.1)
        disp = 'float(%r)' % v
        value = v
    else:
        # Override Fraction.__repr__ for the duration of repr(v),
        # since v might be e.g. a list of fractions.
        # Unfortunately we cannot override float.__repr__.
        with override_repr(fractions.Fraction, fraction_repr):
            disp = repr(v)
        value = None

    display_hook.most_recent = disp
    display_hook.most_recent_value = value
    print(disp)


display_hook.most_recent = None
sys.displayhook = display_hook


def map_flat(st, f):
    path = []

    def visit(node):
        yield f(node, path)
        if isinstance(node, list):
            path.append(node)
            for c in node:
                yield from visit(c)
            path.pop()

    return visit(st)


def get_atom_and_number_id():
    st = parser.suite('1').tolist()
    it = map_flat(st, lambda node, path: node == '1' and path[-2])
    atom, = filter(None, it)
    (atom_id, (number_id, number)) = atom
    return atom_id, number_id


def replace_atoms(source, atoms, repl):
    '''
    Replace given atoms in given Python source code using given function.
    atoms: Iterable of 4-tuples (n, s, lineno, col) sorted on (lineno, col).
    repl: Function accepting (n, s) and returning a replacement string.
    '''

    lines = source.splitlines(True)
    groups = itertools.groupby(atoms, key=lambda n: n[2])
    line_i = 0
    output = []
    for lineno, group in groups:
        line_j = lineno - 1
        output += lines[line_i:line_j]
        line_i = line_j + 1

        col_i = 0
        line = lines[line_j]
        for node_type, lit, _lineno, col in group:
            assert _lineno == lineno
            assert line[col:col+len(lit)] == lit
            col_j = col
            output.append(line[col_i:col_j])
            col_i = col_j + len(lit)

            output.append(repl(node_type, lit))
        output.append(line[col_i:])
    output += lines[line_i:]
    return ''.join(output)


def make_patch_literals():
    atom_id, number_id = get_atom_and_number_id()

    def find_numbers(st):
        def f(node, path):
            if isinstance(node, list) and node[0] == number_id:
                return node

        return filter(None, map_flat(st, f))

    def patch_literals(source):
        st = parser.suite(source).tolist(True, True)
        numbers = find_numbers(st)

        def repl(node_type, literal):
            assert node_type == number_id
            return '(%s(%r))' % (CONSTRUCTOR_VAR, literal)

        return replace_atoms(source, numbers, repl)

    return patch_literals


patch_literals = make_patch_literals()


class CommandCompiler(codeop.CommandCompiler):
    def __call__(self, source, filename="<input>", symbol="single"):
        assert symbol == 'single'
        code = super().__call__(source, filename)
        if code is not None:
            source = patch_literals(source)
            code = super().__call__(source, filename)
        return code


class fractional_range:
    def __init__(self, *args):
        if not all(isinstance(v, (int, fractions.Fraction)) for v in args):
            raise TypeError('incorrect argument types (not int/Fraction)')
        if len(args) == 1:
            start, (stop,), step = 0, args, 1
        elif len(args) == 2:
            (start, stop,), step = args, 1
        elif len(args) == 3:
            start, stop, step = args
        else:
            raise TypeError('incorrect number of arguments')
        if step <= 0:
            raise NotImplemented
        d1 = fractions.Fraction(start).denominator
        d2 = fractions.Fraction(step).denominator
        gcd = math.gcd(d1, d2)
        self.d = d1 * d2 // gcd
        rounded_stop = int(self.d * stop)
        if rounded_stop != self.d * stop:
            rounded_stop += 1
        self.inner = range(int(self.d * start),
                           rounded_stop,
                           int(self.d * step))

    def __getitem__(self, idx):
        return fractions.Fraction(self.inner[idx], self.d)

    def __len__(self):
        return len(self.inner)

    def __contains__(self, v):
        vd = self.d * v
        return vd % 1 == 0 and int(vd) in self.inner


def set_window_title(s):
    print('\033]0;%s\007' % s, flush=True, end='')


def should_set_window_title():
    term = os.environ.get('TERM', '')
    return term.startswith('xterm') or term.startswith('vte')


class FractionalInteractiveConsole(code.InteractiveConsole):
    def __init__(self, locals=None, filename='<console>'):
        if locals is None:
            locals = {}
        assert CONSTRUCTOR_VAR not in locals
        locals[CONSTRUCTOR_VAR] = fractions.Fraction
        locals.setdefault('range', fractional_range)
        super().__init__(locals, filename)
        self.compile = CommandCompiler()
        self.should_set_window_title = should_set_window_title()
        self.most_recent_source = ''

    def get_window_title(self):
        if display_hook.most_recent is None or self.most_recent_source == '':
            return 'pyfrac'

        source = self.most_recent_source.replace('\n', ' ')
        eq = '='
        result = display_hook.most_recent.replace('\n', ' ')
        MAX_LEN = 40
        if len(source) > MAX_LEN:
            source = '%s\N{HORIZONTAL ELLIPSIS}' % source[:MAX_LEN-1]
        if len(result) > MAX_LEN:
            if display_hook.most_recent_value is not None:
                eq = '\N{ALMOST EQUAL TO}'
                result = '%g' % display_hook.most_recent_value
            else:
                result = '%s\N{HORIZONTAL ELLIPSIS}' % result[:MAX_LEN-1]
        return '%s %s %s' % (source, eq, result)

    def raw_input(self, prompt=''):
        if self.should_set_window_title:
            set_window_title(self.get_window_title())
        v = input(prompt)
        display_hook.most_recent = None
        return v

    def runsource(self, source, filename="<input>", symbol="single"):
        self.most_recent_source = source
        return super().runsource(source, filename, symbol)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-q', action='store_true',
                        help="don't print version and copyright messages")
    args = parser.parse_args()

    if args.q or sys.flags.quiet:
        banner, exitmsg = '', ''
    else:
        banner, exitmsg = None, None
    console = FractionalInteractiveConsole()
    console.interact(banner, exitmsg)


if __name__ == "__main__":
    main()
